"""
Django settings for openlxp_xis_project project.
Generated by 'django-admin startproject' using Django 3.1.6.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import mimetypes
import os
import sys
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY_VAL')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

mimetypes.add_type("text/css", ".css", True)

ALLOWED_HOSTS = os.environ.get('HOSTS').split(';')

# Content Security Policy (CSP)
SELF_VALUE = "'self'"  # defining a constant
IMG_DATA_VALUE = "data:"

CSP_DEFAULT_SRC = (SELF_VALUE)
CSP_SCRIPT_SRC = (SELF_VALUE,)
CSP_IMG_SRC = (SELF_VALUE, IMG_DATA_VALUE)
CSP_STYLE_SRC = (SELF_VALUE)
CSP_FRAME_SRC = (SELF_VALUE,)
CSP_FONT_SRC = (SELF_VALUE,)


# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'knox',
    'openlxp_notifications',
    'core',
    'api',
    'health_check', 
    'django_celery_beat',
    'django_celery_results',
    'social_django',
    'openlxp_authentication',
    'key_auth',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True

SESSION_COOKIE_SECURE = True

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_SSL_REDIRECT = True
SECURE_REDIRECT_EXEMPT = ['health/', 'api/health/']

ROOT_URLCONF = 'openlxp_xis_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openlxp_xis_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': 3306,
        'OPTIONS': {
                    'charset': 'utf8mb4',
                }
            },
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

EMAIL_BACKEND = 'django_ses.SESBackend'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# rest_framework settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
CELERY_CACHE_BACKEND = 'default'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    }
}

LOG_PATH = os.environ.get('LOG_PATH')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'loggers': {
        'dict_config_logger': {
            'handlers': ['console', 'file_logs'],
            'level': 'INFO',
            'propagate': True,
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simpleRe',
        },
        'file_logs': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOG_PATH,
            'formatter': 'simpleRe',
        },

    },

    'formatters': {
        'simpleRe': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        }
    }
}

CORS_ALLOWED_ORIGINS = [os.environ.get('CORS_ALLOWED_ORIGINS')]
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_DOMAIN = os.environ.get('CSRF_COOKIE_DOMAIN')
CSRF_TRUSTED_ORIGINS = [os.environ.get('CSRF_COOKIE_DOMAIN'), 'https://'+os.environ.get('CSRF_COOKIE_DOMAIN'),]



AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'knox.auth.TokenAuthentication',
    'openlxp_authentication.models.SAMLDBAuth',
)

# openlxp_authentication settings openlxp_authentication documentation:
# https://github.com/OpenLXP/openlxp-authentication#readme
# social_django documentation:
# https://python-social-auth.readthedocs.io/en/latest/index.html
# SOCIAL_AUTH_STRATEGY = 'openlxp_authentication.models.SAMLDBStrategy'
JSONFIELD_ENABLED = True
USER_MODEL = 'django.contrib.auth.models.User'
SESSION_EXPIRATION = True

if os.environ.get('LOGIN_REDIRECT_URL') is not None:
    LOGIN_REDIRECT_URL = os.environ.get('LOGIN_REDIRECT_URL')

if os.environ.get('OVERIDE_HOST') is not None:
    OVERIDE_HOST = os.environ.get('OVERIDE_HOST')
    BAD_HOST = os.environ.get('BAD_HOST')

if os.environ.get('STRATEGY') is not None:
    SOCIAL_AUTH_STRATEGY = os.environ.get('STRATEGY')

SP_ENTITY_ID = os.environ.get('ENTITY_ID')

SP_PUBLIC_CERT = os.environ.get('SP_PUBLIC_CERT')
SP_PRIVATE_KEY = os.environ.get('SP_PRIVATE_KEY')
ORG_INFO = {
    "en-US": {
        "name": "example",
        "displayname": "Example Inc.",
        "url": "http://localhost",
    }
}
TECHNICAL_CONTACT = {
    "givenName": "Tech Person",
    "emailAddress": "technical@localhost.com"
}
SUPPORT_CONTACT = {
    "givenName": "Support Person",
    "emailAddress": "support@localhost.com",
}
USER_ATTRIBUTES = [
    "user_permanent_id",
    "first_name",
    "last_name",
    "email"
]

# Knox settings

if os.environ.get('TOKEN_LIFE_HOURS') is not None:
    REST_KNOX_TOKEN_TTL = timedelta(
        hours=float(os.environ.get('TOKEN_LIFE_HOURS')))
elif os.environ.get('TOKEN_LIFE_FOREVER') is not None:
    REST_KNOX_TOKEN_TTL = None

if os.environ.get('TOKEN_COUNT_PER_USER') is not None:
    REST_KNOX_TOKEN_LIMIT_PER_USER = int(
        os.environ.get('TOKEN_COUNT_PER_USER'))
