name: Docker CD

on:
  push:
    branches: 
      - main
      - key-hash-api
  pull_request:
    branches: 
      - main
jobs:
  code-test:
# Kicks off the workflow and prepares Github to run coverage test using a ubuntu-latest container.
    name: Code Test
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-latest
      PYTHON: '3.9'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
# Install dependencies required for tests
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt
# Start running test scripts and generate the coverage report
    - name: Generate Coverage Report
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        echo "Cloning private repository"
        git clone https://openlxp-host:${{ secrets.ACCESS_TOKEN }}@github.com/OpenLXP/openlxp-private.git
        echo "Private repository cloned successfully"
        echo "Copying .env file from openlxp-private to current working directory"
        cp ./openlxp-private/openlxp-xis-env/.env .
        echo "Copied .env file successfully"
        echo "Create openlxp docker network"
        docker network create openlxp
        echo "Docker network successfully created"
        echo "Running coverage unit test"
        docker-compose --env-file ./.env run app_xis sh -c "python manage.py waitdb && coverage run manage.py test --tag=unit && flake8 && coverage report && coverage report --fail-under=80"
# Commenting this step for now. 
#    - name: Upload Coverage to Codecov
#      uses: codecov/codecov-action@v1
#      with:
#        fail_ci_if_error: true
#        path_to_write_report: ./coverage/codecov_report.txt
        
  build:
    # requires dependency from step above
    needs: code-test
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Docker login
      env:
       DOCKER_USER: ${{ secrets.DOCKER_USER }}
       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
       echo "Authenticate to Docker"
       docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - name: Docker build
      run: |
       echo "Start docker build"
       docker build . -t openlxp/openlxp-xis
    - name: Push Image
      run: |
       echo "Push new image to the Dockerhub repository"
       docker push openlxp/openlxp-xis
