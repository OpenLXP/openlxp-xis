name: Docker CD

on:
  push:
    branches: 
      - main
      - dev
      - actions-ecr
  pull_request:
    branches: 
      - main
      - dev
jobs:
  code-test:
    # Kicks off the workflow and prepares Github to run coverage test using a ubuntu-latest container.
    name: Code Test
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-latest
      PYTHON: '3.9'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    # Install dependencies required for tests
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt

    # Start running test scripts and generate the coverage report
    - name: Generate Coverage Report
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        echo "Cloning private repository"
        git clone https://openlxp-host:${{ secrets.ACCESS_TOKEN }}@github.com/OpenLXP/openlxp-private.git
        echo "Private repository cloned successfully"
        echo "Copying .env file from openlxp-private to current working directory"
        cp ./openlxp-private/openlxp-xis-env/.env .
        echo "Copied .env file successfully"
        echo "Create openlxp docker network"
        docker network create openlxp
        echo "Docker network successfully created"
        echo "Running coverage unit test"
        docker-compose --env-file ./.env run app_xis sh -c "python manage.py waitdb && coverage run manage.py test --tag=unit && flake8 && coverage report && coverage report --fail-under=80"
    # Commenting this step for now. 
    #    - name: Upload Coverage to Codecov
    #      uses: codecov/codecov-action@v1
    #      with:
    #        fail_ci_if_error: true
    #        path_to_write_report: ./coverage/codecov_report.txt

  build:
    # requires dependency from step above
    needs: code-test
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        IMAGE_TAG: xis
      run: |
        echo "Starting docker build"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG